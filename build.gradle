/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

plugins {
    id 'eclipse'
    id 'idea'
    id "com.diffplug.spotless" version "6.1.2"
}

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
    ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
} else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
    ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
    apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
} else {
    throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

// Copy native dependencies. Required for tests to find os-specific executables
task copyNativeDependencies(type: Copy) {
    from layout.projectDirectory.dir("os")
    into layout.projectDirectory.dir("lib/os")
}
project.tasks.findByName('compileJava').dependsOn copyNativeDependencies

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'ghidra_scripts'
        }
    }

    integration {
        java.srcDir "$projectDir/src/test.integration/java"
        resources.srcDir "$projectDir/src/test.integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }

    typeinference {
        java.srcDir "$projectDir/src/test.typeinference/java"
        resources.srcDir "$projectDir/src/test.typeinference/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationCompileOnly.extendsFrom testCompileOnly
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom testRuntimeOnly

    typeinferenceCompileOnly.extendsFrom testCompileOnly
    typeinferenceImplementation.extendsFrom testImplementation
    typeinferenceRuntimeOnly.extendsFrom testRuntimeOnly
}

idea {
    module {
        // Have the integration tests show up as Intellij test directory
        testSourceDirs += project.sourceSets.integration.java.srcDirs
        testSourceDirs += project.sourceSets.integration.resources.srcDirs
        testSourceDirs += project.sourceSets.typeinference.java.srcDirs
    }
}

// Unit tests
test {
    useJUnit()

    // Do format linting before tests
    dependsOn spotlessCheck
}

// Longer integration tests
tasks.register('integrationTest', Test) {
    description = "Runs integration tests."
    group = 'verification'

    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath


    minHeapSize = "512m" // initial heap size
    maxHeapSize = "6g" // maximum heap size

    // Required due to global state that gets messed up if we don't use a new
    // JVM for each test...
    forkEvery 1

    shouldRunAfter test
}

tasks.register('typeTests', Test) {
    description = "Runs type inference tests."
    group = 'verification'

    testClassesDirs = sourceSets.typeinference.output.classesDirs
    classpath = sourceSets.typeinference.runtimeClasspath

    // Required due to global state that gets messed up if we don't use a new
    // JVM for each test...
    forkEvery 1

    dependsOn tasks.getByPath(':BTIGhidra:copyRustBTIDependencies')

    shouldRunAfter test
}

tasks.withType(Test).configureEach {
    // set JVM arguments for the test JVM(s)
    // Copied from some of Ghidra's properties in
    // 'gradle/javaTestProject.gradle' and
    // 'Ghidra/Test/IntegrationTest/build.gradle'
    jvmArgs '--add-exports=java.desktop/sun.awt=ALL-UNNAMED' // Required for Java 17 compatibility

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
}

check.dependsOn integrationTest

repositories {
    // Local is needed due to vendored maven-build dependency
    mavenLocal()
    mavenCentral()
}

ext {
    jackson_version = '2.13.2'
}

dependencies {
    // Sum types
    annotationProcessor 'org.derive4j:derive4j:1.1.1'
    compileOnly 'org.derive4j:derive4j-annotation:1.1.1'

    implementation(project(':sadie-java-models')) {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    implementation 'com.j256.simplemagic:simplemagic:1.17'
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-toml:$jackson_version"
    // Our vendored maven dependency with a patch that needs to be upstreamed
    implementation('com.networknt:json-schema-validator:1.0.68-SNAPSHOT') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.22.0'
    testImplementation 'org.mockito:mockito-inline:4.3.1'
    typeinferenceImplementation project(':BTIGhidra')

    // Needed for finding platform native executables in 'os/{platform}' directories
    testRuntimeOnly files("lib")
    typeinferenceRuntimeOnly files("../BTIGhidra/plugin/lib")
}

buildExtension.dependsOn tasks.getByPath(':BTIGhidra:buildExtension')

// Install some helper scripts into Ghidra distribution directory
task installScripts(type: Copy) {
    group = "Installation"
    description = "Copies helpful scripts for running SADIE and Ghidra with customized project/app/Java configuration(s)."

    from "$projectDir/scripts/sadieRunHeadless"
    into ghidraInstallDir

    from "$projectDir/scripts/sadie_log4j.xml"
    into ghidraInstallDir

    dependsOn buildExtension
}

// The following installation helpers were copied from
// https://github.com/cmu-sei/kaiju/blob/c00a351aa4332e8b6e2be94f6fe52418f8946b11/build.gradle
task uninstallPreviousSADIE {
    description = "Removes a previous SADIE installation, or notifies user of previous installation"

    doFirst {

        // check if a previous SADIE installation exists
        if (file(ghidraInstallDir + '/Ghidra/Extensions/' + 'SADIE/').exists()) {

            // automatically remove past install if user specifies
            if (project.hasProperty('SADIE_AUTO_REMOVE')) {
                def ooDir = new File(ghidraInstallDir + '/Ghidra/Extensions/' + 'SADIE/')
                ooDir.deleteDir()
                logger.quiet("SUCCESS! Previous standalone SADIE installation was removed automatically by gradle.")
            } else {
                throw new GradleException("FATAL ERROR! A previous installation of SADIE was detected. It is recommended that you either manually remove this installation before re-installing SADIE, or re-run this gradle installation script with the -PSADIE_AUTO_REMOVE option.")
            }
        }
    }

    outputs.upToDateWhen { false } // ensures never cached, always runs if user enables
}
buildHelp.dependsOn uninstallPreviousSADIE

task copyZip(type: Copy) {

    group = "Installation"
    description = "Copies zip contents into special Extensions directory so user may enable or disable easily with reinstalling from gradle each time."

    from "$buildExtension.destinationDir/$buildExtension.baseName.$buildExtension.extension"
    into ghidraInstallDir + '/Extensions/Ghidra'

    dependsOn buildExtension
}

task installZip(type: Exec) {

    group = "Installation"
    description = "Installs the zip package in installed Ghidra's default extension directory"

    workingDir ghidraInstallDir + '/Ghidra/Extensions'
    commandLine 'unzip', '-o', "$buildExtension.destinationDir/$buildExtension.baseName.$buildExtension.extension"

    dependsOn copyZip
    mustRunAfter copyZip
}

task install() {
    dependsOn installZip
    dependsOn installScripts

    group = "Installation"
    description = "Alternate name for installZip task"

    doLast {
        // Empty action list
        logger.quiet("Installed Trail of Bits SADIE from zip!")
    }
}
// End copy

// Code style formatting
spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    // ratchetFrom 'origin/main'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    java {
        target 'src/*/java/**/*.java', 'ghidra_scripts/*.java'
        importOrder() // standard import order

        removeUnusedImports()

        googleJavaFormat('1.13.0')

        // licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
    }
}
