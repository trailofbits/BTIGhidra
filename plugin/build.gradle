/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

plugins {
    id 'eclipse'
    id 'idea'
    id "com.diffplug.spotless" version "6.1.2"
    id "com.google.protobuf" version "0.8.18"
}

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
    ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
    ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
    apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else {
    throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

// For OS directory detection and naming
apply from: new File(ghidraInstallDir).getCanonicalPath() + "/GPL/nativePlatforms.gradle"

repositories {
    mavenCentral()
}

def protobufVersion = '3.17.3'

// Our dependencies need to be stated first for classpath
dependencies {
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.22.0'
    testImplementation 'org.mockito:mockito-inline:4.2.0'

    // Needed for finding platform native executables in 'os/{platform}' directories
    testRuntimeOnly files("lib")
}

// ***** Copied from https://medium.com/@esycat/gradle-exec-output-f18f297c068 ****
import java.io.ByteArrayOutputStream;
import org.gradle.api.logging.Logger;
import org.gradle.api.logging.LogLevel;
public class LogOutputStream extends ByteArrayOutputStream {

    private final Logger logger;
    private final LogLevel level;

    public LogOutputStream(Logger logger, LogLevel level) {
        this.logger = logger;
        this.level = level;
    }

    public Logger getLogger() {
        return logger;
    }

    public LogLevel getLevel() {
        return level;
    }

    @Override
    public void flush() {
        logger.log(level, toString());
        reset();
    }
}
// ***** End copy from https://medium.com/@esycat/gradle-exec-output-f18f297c068 ****

task buildRustBTI(type: Exec) {
    workingDir '../binary_type_inference'
    commandLine 'cargo', 'build', '--release'

    standardOutput new LogOutputStream(logger, LogLevel.INFO)
    errorOutput    new LogOutputStream(logger, LogLevel.ERROR)

    outputs.upToDateWhen { false } // ensures never cached, always runs if user enables
}

task copyRustBTIDependencies(type: Copy, dependsOn: buildRustBTI) {
    from '../binary_type_inference/target/release/json_to_constraints'
    into layout.projectDirectory.dir("os/${currentPlatformName}")
}

// Copy native dependencies. Required for tests to find os-specific executables
task copyNativeDependencies(type: Copy, dependsOn: copyRustBTIDependencies) {
    from layout.projectDirectory.dir("os")
    into layout.projectDirectory.dir("lib/os")
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }

        proto {
            // In addition to the default 'src/main/proto'
            srcDir '../binary_type_inference/data_formats'
            // In addition to the default '**/*.proto' (use with caution).
            // Using an extension other than 'proto' is NOT recommended,
            // because when proto files are published along with class files, we can
            // only tell the type of a file from its extension.
            include '*.proto'
        }
    }

    integration {
        java.srcDir "$projectDir/src/test.integration/java"
        resources.srcDir "$projectDir/src/test/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

// Unit tests
test {
    useJUnit()

    // Do format linting before tests
    dependsOn spotlessCheck, copyNativeDependencies
}

// Longer integration tests
tasks.register('integrationTest', Test) {
    description = "Runs integration tests."
    group = 'verification'
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath

    // Required due to global state that gets messed up if we don't use a new
    // JVM for each test...
    forkEvery 1

    dependsOn spotlessCheck, copyNativeDependencies

    shouldRunAfter test
}

configurations {
    integrationCompileOnly.extendsFrom testCompileOnly
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom testRuntimeOnly
}

check.dependsOn integrationTest

idea {
    module {
        // Have the integration tests show up as Intellij test directory
        testSourceDirs += project.sourceSets.integration.java.srcDirs
        testSourceDirs += project.sourceSets.integration.resources.srcDirs
    }
}

tasks.withType(Test).configureEach {
    // set JVM arguments for the test JVM(s)
    // Copied from some of Ghidra's properties in
    // 'gradle/javaTestProject.gradle' and
    // 'Ghidra/Test/IntegrationTest/build.gradle'
    jvmArgs '--add-exports=java.desktop/sun.awt=ALL-UNNAMED' // Required for Java 17 compatibility

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

// The following installation helpers were copied from
// https://github.com/cmu-sei/kaiju/blob/c00a351aa4332e8b6e2be94f6fe52418f8946b11/build.gradle
task uninstallPreviousBTI {
    description = "Removes a previous Binary Type Inference (BTI) installation, or notifies user of previous installation"

    doFirst {

        // check if a previous BTI installation exists
        if (file(ghidraInstallDir + "/Ghidra/Extensions/${project.name}/").exists()) {

            // automatically remove past install if user specifies
            if (project.hasProperty('BTI_AUTO_REMOVE')) {
                def ooDir = new File(ghidraInstallDir + "/Ghidra/Extensions/${project.name}/")
                ooDir.deleteDir()
                logger.quiet("SUCCESS! Previous standalone Binary Type Inference (${project.name}) installation was removed automatically by gradle.")
            } else {
                throw new GradleException("FATAL ERROR! A previous installation of Binary Type Inference (${project.name}) was detected. It is recommended that you either manually remove this installation before re-installing BTI, or re-run this gradle installation script with the -PBTI_AUTO_REMOVE option.")
            }
        }
    }

    outputs.upToDateWhen { false } // ensures never cached, always runs if user enables
}
compileJava.dependsOn uninstallPreviousBTI

task copyZip(type: Copy) {

    group = "Installation"
    description = "Copies zip contents into special Extensions directory so user may enable or disable easily with reinstalling from gradle each time."

    from "${buildExtension.destinationDirectory.get()}/${buildExtension.archiveBaseName.get()}.${buildExtension.archiveExtension.get()}"
    into ghidraInstallDir + '/Extensions/Ghidra'

    dependsOn buildExtension
}

task installZip(type: Exec) {
    group = "Installation"
    description = "Installs the zip package in installed Ghidra's default extension directory"

    workingDir ghidraInstallDir + '/Ghidra/Extensions'

    commandLine 'unzip', '-o', "${buildExtension.destinationDirectory.get()}/${buildExtension.archiveBaseName.get()}.${buildExtension.archiveExtension.get()}"

    dependsOn copyZip
    mustRunAfter copyZip
}

task installCWECheckerScripts(type: Copy) {
    group = "Installation"
    description = "Copies the submodule'd CWE Checker Ghidra scripts"

    from "../binary_type_inference/cwe_checker/src/ghidra/p_code_extractor"
    into ghidraInstallDir + "/Ghidra/Extensions/${project.name}/ghidra_scripts"
    include '**/*.*'

    mustRunAfter installZip
}

task install() {
    dependsOn installZip, installCWECheckerScripts

    group = "Installation"
    description = "Alternate name for installZip task"
    //title = "Install zip"

    doLast {
        // Empty action list
        logger.quiet("Installed Trail of Bits Binary Type Inference from zip!")
    }
}
// End copy

// Ignore including some files in the zip distribution
buildExtension {
    exclude '.idea'
    exclude 'gradle*'
    exclude 'lib/os'
}
buildExtension.dependsOn copyRustBTIDependencies

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generateProtoTasks {
        all().each { task -> task.dependsOn copyDependencies }
    }
}

// Code style formatting
spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    // ratchetFrom 'origin/main'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    java {
        target 'src/*/java/**/*.java', 'ghidra_scripts/*.java'
        importOrder() // standard import order
        targetExclude('src/main/java/ctypes/Ctypes.java', 'src/main/java/constraints/Constraints.java')
        removeUnusedImports()

        googleJavaFormat('1.13.0')

        // licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
    }
}
