/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

plugins {
    id 'eclipse'
    id 'idea'
    id 'java'
    id "com.diffplug.spotless" version "6.1.2"
    id "com.google.protobuf" version "0.8.17"
}

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
    ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
    ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
    apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else {
    throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.protobuf:protobuf-java:3.17.3'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.22.0'
    testImplementation 'org.mockito:mockito-inline:4.2.0'

    // Needed for finding platform native executables in 'os/{platform}' directories
    testRuntimeOnly files("lib")
}

// Unit tests
test {
    useJUnit()

    // Do format linting before tests
    dependsOn spotlessCheck
}

// The following installation helpers were copied from
// https://github.com/cmu-sei/kaiju/blob/c00a351aa4332e8b6e2be94f6fe52418f8946b11/build.gradle
task uninstallPreviousBTI {
    description = "Removes a previous Binary Type Inference (BTI) installation, or notifies user of previous installation"

    doFirst {

        // check if a previous BTI installation exists
        if (file(ghidraInstallDir + '/Ghidra/Extensions/' + 'BinaryTypeInference/').exists()) {

            // automatically remove past install if user specifies
            if (project.hasProperty('BTI_AUTO_REMOVE')) {
                def ooDir = new File(ghidraInstallDir + '/Ghidra/Extensions/' + 'BTI/')
                ooDir.deleteDir()
                logger.quiet("SUCCESS! Previous standalone Binary Type Inference (BTI) installation was removed automatically by gradle.")
            } else {
                throw new GradleException("FATAL ERROR! A previous installation of Binary Type Inference (BTI) was detected. It is recommended that you either manually remove this installation before re-installing BTI, or re-run this gradle installation script with the -PBTI_AUTO_REMOVE option.")
            }
        }
    }

    outputs.upToDateWhen { false } // ensures never cached, always runs if user enables
}
buildHelp.dependsOn uninstallPreviousBTI

task copyZip(type: Copy) {

    group = "Installation"
    description = "Copies zip contents into special Extensions directory so user may enable or disable easily with reinstalling from gradle each time."

    from "$buildExtension.destinationDir/$buildExtension.baseName.$buildExtension.extension"
    into ghidraInstallDir + '/Extensions/Ghidra'

    dependsOn buildExtension
}

task installZip(type: Exec) {

    group = "Installation"
    description = "Installs the zip package in installed Ghidra's default extension directory"

    workingDir ghidraInstallDir + '/Ghidra/Extensions'
    commandLine 'unzip', '-o', "$buildExtension.destinationDir/$buildExtension.baseName.$buildExtension.extension"

    dependsOn copyZip
    mustRunAfter copyZip
}

task install() {
    dependsOn installZip

    group = "Installation"
    description = "Alternate name for installZip task"
    //title = "Install zip"

    doLast {
        // Empty action list
        logger.quiet("Installed Trail of Bits Binary Type Inference from zip!")
    }
}
// End copy

protobuf {
    generatedFilesBaseDir = "$projectDir/src"
    protoc {
        artifact = "com.google.protobuf:protoc:3.17.3"
    }
    generateProtoTasks {
        all().each { task -> task.dependsOn copyDependencies }
    }
}
sourceSets {
  main {
    proto {
      // In addition to the default 'src/main/proto'
      srcDir '../binary_type_inference/data_formats'
      // In addition to the default '**/*.proto' (use with caution).
      // Using an extension other than 'proto' is NOT recommended,
      // because when proto files are published along with class files, we can
      // only tell the type of a file from its extension.
      include '*.proto'
    }
  }
}

// Code style formatting
spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    // ratchetFrom 'origin/main'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    java {
        target 'src/*/java/**/*.java', 'ghidra_scripts/*.java'
        importOrder() // standard import order
        targetExclude('src/main/java/ctypes/Ctypes.java')
        targetExclude('src/main/java/constraints/Constraints.java')
        removeUnusedImports()

        googleJavaFormat('1.13.0')

        // licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
    }
}
